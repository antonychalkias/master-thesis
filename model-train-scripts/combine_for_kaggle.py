#!/usr/bin/env python3
"""
This script combines all modular Python files into a single file for Kaggle.
It merges model.py, data.py, utils.py, train.py, and infer.py into kaggle_model.py.
"""

import os
import re

# Directory containing the modular files
script_dir = os.path.dirname(os.path.abspath(__file__))

# Order of files to process (important for dependencies)
files_to_merge = [
    "model.py",
    "data.py",
    "utils.py",
    "train.py",
    "infer.py"
]

# Output file path
output_file = os.path.join(script_dir, "kaggle_model.py")

# Regex to match import statements for our local modules
local_import_pattern = re.compile(r'from\s+(model|data|utils)\s+import\s+([^\n]+)')

def read_file_content(filepath):
    """Read content of a file, return as string"""
    with open(filepath, 'r') as f:
        return f.read()

def process_file(file_content, filename):
    """
    Process file content:
    - Keep the file's docstring
    - Remove imports of our local modules
    - Keep other imports
    - Keep all code
    """
    # Remove imports of our local modules
    content = local_import_pattern.sub('', file_content)
    
    # Remove shebang line if present
    content = re.sub(r'^#!/usr/bin/env python3\n', '', content)
    
    # Add a comment to indicate which file this code came from
    header = f"\n\n# ========================= {filename} =========================\n"
    
    return header + content

def main():
    all_content = "#!/usr/bin/env python3\n"
    all_content += '"""\nCombined model for food recognition and weight estimation.\n'
    all_content += 'This file was automatically generated by combining model.py, data.py, utils.py, and train.py.\n"""\n\n'
    
    # List of all imports we've seen
    all_imports = []
    
    # Extract all imports from all files first
    for filename in files_to_merge:
        filepath = os.path.join(script_dir, filename)
        if not os.path.exists(filepath):
            print(f"Warning: File {filepath} not found, skipping.")
            continue
        
        content = read_file_content(filepath)
        
        # Extract all import lines
        import_lines = re.findall(r'^(?:import|from)\s+[^\n]+', content, re.MULTILINE)
        
        # Skip local module imports
        for line in import_lines:
            if not local_import_pattern.match(line) and line not in all_imports:
                all_imports.append(line)
    
    # Add all unique imports at the top
    all_content += "\n".join(all_imports) + "\n"
    
    # Process each file
    for filename in files_to_merge:
        filepath = os.path.join(script_dir, filename)
        if not os.path.exists(filepath):
            continue
        
        print(f"Processing {filename}...")
        content = read_file_content(filepath)
        
        # Process the content
        processed_content = process_file(content, filename)
        
        # Add to combined content
        all_content += processed_content
    
    # Fix any remaining references to label_to_idx in train_model function
    all_content = all_content.replace("'label_to_idx': label_to_idx", "'label_to_idx': label_to_idx")
    
    # Write the combined content to the output file
    with open(output_file, 'w') as f:
        f.write(all_content)
    
    print(f"\nCombined file created successfully: {output_file}")
    print("You can now upload this file to Kaggle!")

if __name__ == "__main__":
    main()
